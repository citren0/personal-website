<!DOCTYPE html>

<html>
    <head>
        <link rel="stylesheet" href="/style.css">
    </head>

    <body>
        <%- include ('./../../partials/navbar.ejs') %>

        <div class="container">
            <h1>Popcount</h1>
            <hr>

            <p>
                Think of a hypothetical situation where you would need to express yes or no answers in a stream of
                digital information. Perhaps these are sensor readings coming at a high speed. Instead
                of sending bytes representing a boolean yes or no, you may choose to send a single 1 or 0
                per reading.
            </p>

            <p>
                If you took some length of these readings, say 64 of them, and wanted to calculate the number of
                trues or falses, you would need an algorithm to count how many 1s are in your bitstream. Falses
                can be easily calculated by subtracting the number of 1s from the total number of bits.
            </p>

            <p>
                That's where this popcount algorithm comes in: it provides an easy way to iterate over
                an arbitrary length bitstring and calculate the number of 1s in the string.
            </p>
            
            <p>
                The code is relatively simple, I will explain the main algorithm after the image, and show 
                the disassembly.
            </p>

            <br>
            <img src="/posts/popcount/code.png" height="700px">
            <br>

            <p>
                The code in <code style="font-family: monospace, monospace;">main()</code> is mostly filler for the arguments and converting them into integers. Let's 
                focus on the <code style="font-family: monospace, monospace;">popcount()</code> function.
            </p>

            <pre>
                <code style="font-family: monospace, monospace;">
                    int popcount(uint64_t x)
                    {
                        int num = 0;

                        while (x != 0)
                        {
                            x &= x - 1;
                            num++;
                        }

                        return num;
                    }
                </code>
            </pre>

            <p>
                This function looks confusing to understand at first, but after diving into the mechanics of binary manipulation,
                it is quite simple.
            </p>

            <p>
                Imagine you have a binary string <code style="font-family: monospace, monospace;">10100</code>. If you want to get rid of the least significant 1 in 
                the number, it's easy. Start by subtracting one from the original number, which will guarantee a flip of 
                all bits at or below the least significant 1.
            </p>

            <pre>
                <code style="font-family: monospace, monospace;">
                     10100
                    -    1
                     -----
                     10011
                </code>
            </pre>

            <p>
                Notice how all bits of equal or less significance as the least significant 1 have been flipped.
            </p>

            <p>
                Now, 'and' the original number with the subtracted version.
            </p>

            <pre>
                <code style="font-family: monospace, monospace;">
                      10100
                    & 10011
                    -------
                      10000
                </code>
            </pre>

            <p>
                Voila. We have now produced a number with one less 1 than the original. We can keep doing
                this until the 'and'ed number equals 0.
            </p>

            <p>
                This results in a fast way to calculate the number of 1s in a bitstring. But, there
                is a faster way. (There are also faster ways to do this without gcc builtins, check notes.)
            </p>

            <a href="https://en.wikipedia.org/wiki/X86_Bit_manipulation_instruction_set">https://en.wikipedia.org/wiki/X86_Bit_manipulation_instruction_set</a>

            <p>
                So from the reading there is a way in the x86 architecture to calculate popcount in a single instruction. This throws
                the iterative algorithm out the window.
            </p>
            
            <p>
                Now in my case, the current version of gcc (13.2.1) is not replacing my iterative popcount with
                the single instruction automatically, so we can do it manually. Let's let gcc use the most efficient
                version of popcount instead of our iterative solution.
            </p>

            <pre>
                <code style="font-family: monospace, monospace;">
                    int popcount(uint64_t x)
                    {
                        return __builtin_popcount(x);
                    }
                </code>
            </pre>

            <p>
                And the resulting disassembly...
            </p>

            <img src="/posts/popcount/codeimproved.png" height="500px">

            <p>
                What happened? I was promised a single instruction. Well it turns out you need to enable
                processor-specific extensions manually, otherwise gcc will substitute in an algorithm with a
                constant time complexity, which is more portable than special instructions.
            </p>

            <a href="https://en.wikipedia.org/wiki/SSE4">https://en.wikipedia.org/wiki/SSE4</a>

            <pre>
                <code style="font-family: monospace, monospace;">
                    gcc -mpopcnt -msse4.2 popcount.c
                </code>
            </pre>

            <img src="/posts/popcount/codefixed.png">

            <p>
                That's better. Honestly the improvement between the gcc constant time algorithm and the single
                instruction won't result in massive savings unless you're running popcount very frequently.
                If that is your usecase, though, this could result in massive improvements.
            </p>

            <p>
                Anyway, I just found this algorithm pretty interesting. Thanks for reading.
            </p>


            <br><br>
            <h3>Notes:</h3>
            <ul>
                <li>
                    <a href="https://graphics.stanford.edu/~seander/bithacks.html">https://graphics.stanford.edu/~seander/bithacks.html</a>
                    <p>Useful bitwise hacks if you don't like the gcc prebuilt. Describes gcc's portable default for popcount.</p>
                </li>
            </ul>

        </div>

        <div style="height: 10rem;"></div>

    </body>
</html>